from Ho_Ho_Ho import parse_wishlist

import unittest

class WishlistTest(unittest.TestCase):
    def test_one_wish(self):
        wishlist = """
        (   80  )    John Doe  [ 22 –≥–æ–¥–∏–Ω–∏ ]  


        - –ø–æ-—Ö—É–±–∞–≤–æ –∏–º–µ üòÖ
         -
         *
    - !!!lukanka
        """
        self.assertEqual(parse_wishlist(wishlist), [(80, 'John Doe', 22, ('–ø–æ-—Ö—É–±–∞–≤–æ –∏–º–µ üòÖ', '!!!lukanka'))])

    def test_two_wishes(self):
        wishlist = """
        (3.1415926536)  Pitagor "–•–∏–ø–æ—Ç–µ–Ω—É–∑–æ–≤" :(  [ 2592 –≥–æ–¥–∏–Ω–∏ –º–∞–ª–µ–µ]
            - —Ç—Ä–∏—ä–≥—ä–ª–Ω–∏–∫, –∑–∞ –¥–∞ —Å–∏ –º–µ—Ä–∏ ... —Ö–∏–ø–æ—Ç–µ–Ω—É–∑–∞—Ç–∞
            *   –≤—ä–∂–µ :)

        * —á—É–∫ –∏ –Ω–∞–∫–æ–≤–∞–ª–Ω—è
                - 
                - 
                *
            (112)  –ú–µ—á–æ –ü—É—Ö/ [8]

                    - burkanche med (x11)
            *  :–ª—ä–∂–∏—Ü–∞:
        """

        self.assertEqual(parse_wishlist(wishlist), [
            (3.1415926536, 'Pitagor "–•–∏–ø–æ—Ç–µ–Ω—É–∑–æ–≤" :(', 2592,
             ('—Ç—Ä–∏—ä–≥—ä–ª–Ω–∏–∫, –∑–∞ –¥–∞ —Å–∏ –º–µ—Ä–∏ ... —Ö–∏–ø–æ—Ç–µ–Ω—É–∑–∞—Ç–∞', '–≤—ä–∂–µ :)', '—á—É–∫ –∏ –Ω–∞–∫–æ–≤–∞–ª–Ω—è')),
            (112, '–ú–µ—á–æ –ü—É—Ö/', 8, ('burkanche med (x11)', ':–ª—ä–∂–∏—Ü–∞:'))
        ])

    def test_dqdo_koleda(self):
        wishlist = """
        (-1)   Santa Claus  [18+]

                * snejanka

            -  snejanka
                -SNEJANKA

        (156.19) Snejanka [20 g.]

            -da e dalech ot dqdo koleda üíÄ              
                * 
                 *
                - pileshko s orizzz

        """
        self.assertEqual(parse_wishlist(wishlist), [
            (-1, 'Santa Claus', 18, ('snejanka', 'snejanka', 'SNEJANKA')),
            (156.19, 'Snejanka', 20, ('da e dalech ot dqdo koleda üíÄ', 'pileshko s orizzz'))
        ])